/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.6.1
// source: grpcModels.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./grpcModels_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.LoginServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.LoginServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreateUserRequest,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_LoginService_CreateUser = new grpc.web.MethodDescriptor(
  '/LoginService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.CreateUserRequest,
  proto.MessageResponse,
  /**
   * @param {!proto.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LoginServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LoginService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_LoginService_CreateUser,
      callback);
};


/**
 * @param {!proto.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MessageResponse>}
 *     Promise that resolves to the response
 */
proto.LoginServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LoginService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_LoginService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LoginRequest,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_LoginService_Login = new grpc.web.MethodDescriptor(
  '/LoginService/Login',
  grpc.web.MethodType.UNARY,
  proto.LoginRequest,
  proto.MessageResponse,
  /**
   * @param {!proto.LoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.LoginServiceClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/LoginService/Login',
      request,
      metadata || {},
      methodDescriptor_LoginService_Login,
      callback);
};


/**
 * @param {!proto.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MessageResponse>}
 *     Promise that resolves to the response
 */
proto.LoginServicePromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/LoginService/Login',
      request,
      metadata || {},
      methodDescriptor_LoginService_Login);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ProductServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ProductServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Product,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_ProductService_CreateProduct = new grpc.web.MethodDescriptor(
  '/ProductService/CreateProduct',
  grpc.web.MethodType.UNARY,
  proto.Product,
  proto.MessageResponse,
  /**
   * @param {!proto.Product} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductServiceClient.prototype.createProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductService/CreateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_CreateProduct,
      callback);
};


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MessageResponse>}
 *     Promise that resolves to the response
 */
proto.ProductServicePromiseClient.prototype.createProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductService/CreateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_CreateProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Product,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_ProductService_UpdateProduct = new grpc.web.MethodDescriptor(
  '/ProductService/UpdateProduct',
  grpc.web.MethodType.UNARY,
  proto.Product,
  proto.MessageResponse,
  /**
   * @param {!proto.Product} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductServiceClient.prototype.updateProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductService/UpdateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_UpdateProduct,
      callback);
};


/**
 * @param {!proto.Product} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MessageResponse>}
 *     Promise that resolves to the response
 */
proto.ProductServicePromiseClient.prototype.updateProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductService/UpdateProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_UpdateProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RemoveProductRequest,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_ProductService_RemoveProduct = new grpc.web.MethodDescriptor(
  '/ProductService/RemoveProduct',
  grpc.web.MethodType.UNARY,
  proto.RemoveProductRequest,
  proto.MessageResponse,
  /**
   * @param {!proto.RemoveProductRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.RemoveProductRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ProductServiceClient.prototype.removeProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ProductService/RemoveProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_RemoveProduct,
      callback);
};


/**
 * @param {!proto.RemoveProductRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MessageResponse>}
 *     Promise that resolves to the response
 */
proto.ProductServicePromiseClient.prototype.removeProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ProductService/RemoveProduct',
      request,
      metadata || {},
      methodDescriptor_ProductService_RemoveProduct);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ReportServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ReportServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.ReportResponse>}
 */
const methodDescriptor_ReportService_GetStock = new grpc.web.MethodDescriptor(
  '/ReportService/GetStock',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.ReportResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ReportResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ReportResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ReportResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReportServiceClient.prototype.getStock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ReportService/GetStock',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetStock,
      callback);
};


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ReportResponse>}
 *     Promise that resolves to the response
 */
proto.ReportServicePromiseClient.prototype.getStock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ReportService/GetStock',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetStock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ReportRequest,
 *   !proto.ReportResponse>}
 */
const methodDescriptor_ReportService_GetProductWithoutStock = new grpc.web.MethodDescriptor(
  '/ReportService/GetProductWithoutStock',
  grpc.web.MethodType.UNARY,
  proto.ReportRequest,
  proto.ReportResponse,
  /**
   * @param {!proto.ReportRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ReportResponse.deserializeBinary
);


/**
 * @param {!proto.ReportRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ReportResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ReportResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReportServiceClient.prototype.getProductWithoutStock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ReportService/GetProductWithoutStock',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetProductWithoutStock,
      callback);
};


/**
 * @param {!proto.ReportRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ReportResponse>}
 *     Promise that resolves to the response
 */
proto.ReportServicePromiseClient.prototype.getProductWithoutStock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ReportService/GetProductWithoutStock',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetProductWithoutStock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ReportRequest,
 *   !proto.ReportResponse>}
 */
const methodDescriptor_ReportService_GetProductWithoutOut = new grpc.web.MethodDescriptor(
  '/ReportService/GetProductWithoutOut',
  grpc.web.MethodType.UNARY,
  proto.ReportRequest,
  proto.ReportResponse,
  /**
   * @param {!proto.ReportRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ReportResponse.deserializeBinary
);


/**
 * @param {!proto.ReportRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ReportResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ReportResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReportServiceClient.prototype.getProductWithoutOut =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ReportService/GetProductWithoutOut',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetProductWithoutOut,
      callback);
};


/**
 * @param {!proto.ReportRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ReportResponse>}
 *     Promise that resolves to the response
 */
proto.ReportServicePromiseClient.prototype.getProductWithoutOut =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ReportService/GetProductWithoutOut',
      request,
      metadata || {},
      methodDescriptor_ReportService_GetProductWithoutOut);
};


module.exports = proto;

